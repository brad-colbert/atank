# Sample linker configuration for C programs using the Atari binary file support.
# Use with: cl65 -tatari -Catari-xex.cfg prog.c -o prog.xex
FEATURES {
    STARTADDRESS: default = $2000;
}
SYMBOLS {
    #__SYSTEM_CHECK__:    type = import;  # force inclusion of "system check" load chunk
    __STACKSIZE__:       type = weak, value = $0800; # 2k stack
    __STARTADDRESS__:    type = export, value = %S;
    # No reserved memory
    __RESERVED_MEMORY__: type = weak, value = $0000;
}
MEMORY {
    ZP:          file = "", define = yes, start = $0082, size = $007E;
    LINE_COORDS: file = "", define = no,  start = $5500, size = $0100; # 256 bytes for line coords 8 bytes per line, 32 lines
    LINE_ERASE_COORDS: file = "", define = no,  start = $5600, size = $0100; # 256 bytes for two buffers of lines to erase.  4 bytes per line, 32 lines
    FRAMEBUFFER: file = "", define = no,  start = $6010, size = $1E00; # 40 * 192 (gfx 8 320x192) + 16 bytes to push together the 4K block + remaining.
    # "main program" load chunk
    MAIN:       file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S;
}
FILES {
    %O: format = atari;
}
FORMATS {
    atari: runad = start;
}
SEGMENTS {
    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
    STARTUP:   load = MAIN,       type = ro,  define = yes;
    LOWBSS:    load = MAIN,       type = rw,                optional = yes;  # not zero initialized
    LOWCODE:   load = MAIN,       type = ro,  define = yes, optional = yes;
    ONCE:      load = MAIN,       type = ro,                optional = yes;
    CODE:      load = MAIN,       type = ro,  define = yes;
    RODATA:    load = MAIN,       type = ro;
    DATA:      load = MAIN,       type = rw;
    INIT:      load = MAIN,       type = rw,                optional = yes;
    BSS:       load = MAIN,       type = bss, define = yes;

    FRAMEBUFFER:       load = FRAMEBUFFER,       type = rw, define = yes;
    LINE_ERASE_COORDS: load = LINE_ERASE_COORDS, type = rw, define = yes;
    LINE_COORDS:       load = LINE_COORDS,       type = rw, define = yes;

    FBLUTLO:      load = MAIN, type = rw, define = yes, align = $0100;
    FBLUTHI:      load = MAIN, type = rw, define = yes, align = $0100;
    GFX8_DL:      load = MAIN, type = rw, define = yes, align = $0400;
    PLAYERMISSILE:load = MAIN, type = rw, define = yes, align = $0400;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
