# Sample linker configuration for C programs using the Atari binary file support.
# Use with: cl65 -tatari -Catari-xex.cfg prog.c -o prog.xex
FEATURES {
    STARTADDRESS: default = $2000;
}
SYMBOLS {
    __STACKSIZE__:       type = weak, value = $0800; # 2k stack
    __STARTADDRESS__:    type = export, value = %S;
    # No reserved memory
    __RESERVED_MEMORY__: type = weak, value = $0000;
}
MEMORY {
    ZP:            file = "", define = yes, start = $0082, size = $007E;

    PLAYERMISSILE: file = "", define = no,  start = $5800, size = $0800; # 2048 bytes
    PLAYFIELD_DATA:file = %O, define = yes, start = $6000, size = $4000; # 25 * 40 (ANTIC 4) * 4 x 4 + 3 * 16 bytes to push together the 4K block + remaining.
    LOGO_MEM:                 define = yes, start = $6010, size = $1E00;
    LOGO_DL_MEM:              define = yes, start = $9000, size = $0100;

    # "main program" load chunk
    MAIN:          file = %O, define = yes, start = %S,    size = $BC20 - __STACKSIZE__ - __RESERVED_MEMORY__ - %S;
}
FILES {
    %O: format = atari;
}
FORMATS {
    atari: runad = start ;#,
}
SEGMENTS {
    ZEROPAGE:  load = ZP,         type = zp;
    EXTZP:     load = ZP,         type = zp,                optional = yes;
    STARTUP:   load = MAIN,       type = ro,  define = yes;
    LOWBSS:    load = MAIN,       type = rw,                optional = yes;  # not zero initialized
    LOWCODE:   load = MAIN,       type = ro,  define = yes, optional = yes;
    ONCE:      load = MAIN,       type = ro,                optional = yes;
    CODE:      load = MAIN,       type = ro,  define = yes;
    RODATA:    load = MAIN,       type = ro;
    DATA:      load = MAIN,       type = rw;
    #INIT:      load = MAIN,       type = rw,                optional = yes;
    BSS:       load = MAIN,       type = bss, define = yes;

    PLAYERMISSILE:  load = PLAYERMISSILE,  type = rw, define = yes;
    LOGO:           load = LOGO_MEM,       type = ro;
    LOGO_DL:        load = LOGO_DL_MEM,    type = ro;
    PLAYFIELD_ROW0: load = PLAYFIELD_DATA, type = rw, define = yes;
    GAME_DATA0:     load = PLAYFIELD_DATA, type = rw, define = yes;
    PLAYFIELD_ROW1: load = PLAYFIELD_DATA, type = rw, define = yes;
    GAME_DATA1:     load = PLAYFIELD_DATA, type = rw, define = yes;
    PLAYFIELD_ROW2: load = PLAYFIELD_DATA, type = rw, define = yes;
    DISPLAYLIST:    load = PLAYFIELD_DATA, type = rw, define = yes;
    PLAYFIELD_ROW3: load = PLAYFIELD_DATA, type = rw, define = yes;

    #
    #MYFONT:      load = MAIN,     type = rw,  define = yes, align=$0100;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
